package bot.command.user;

import bot.command.CommandHandler;
import bot.command.ICommand;
import bot.message.Messages;
import bot.tool.parsers.FilmsParser;
import bot.tool.records.FilmRecord;
import bot.util.Colors;
import bot.util.Config;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.Message;
import net.dv8tion.jda.api.entities.TextChannel;
import net.dv8tion.jda.api.events.message.guild.GuildMessageReceivedEvent;
import net.dv8tion.jda.api.events.message.guild.react.GuildMessageReactionAddEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import org.jetbrains.annotations.NotNull;

import java.util.Calendar;
import java.util.LinkedList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class FilmsCommand extends ListenerAdapter implements ICommand {

    private static final String filmChooseMsgContent = "\uD83D\uDEB7 - –Ω–µ—á–µ–ª–æ–≤–µ–∫ **(250—Ä)**\n\uD83D\uDEAE - –ø—Ä–æ–ª–µ—Ç–∞—Ä–∏–∞—Ç **(350—Ä)**\n\uD83D\uDCB0 - –∫–∞–ø–∏—Ç–∞–ª–∏—Å—Ç **(–≤—Å–µ)**";
    private static long filmChooseMsgID;

    private static String filmName;
    private static String day;
    private static boolean findError = false;

    private boolean modifications(String[] args, TextChannel channel) {
        findError = false;
        filmName = day = "";
        for(int i = 1; i < args.length;) {
            switch (args[i]) {
                case "-f":
                    if(args.length <= i+1) return false;
                    filmName = args[i+1];
                    i+=2;
                    while (i < args.length && args[i].charAt(0) != '-') filmName += " " + args[i++];
                    break;
                case "-d":
                    if(args.length <= i+1)return false;
                    // Check correct date
                    Pattern datePattern = Pattern.compile("(0[1-9]|1[012])\\.(0[1-9]|[12][0-9]|3[01])");
                    if(!datePattern.matcher(args[i+1]).matches()) {
                        findError = true;
                        EmbedBuilder exceptionMsg = Messages.createErrorMsg("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞", "–£–∫–∞–∑—ã–≤–∞–π—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM.DD", true, getName());
                        channel.sendMessage(exceptionMsg.build()).queue();
                        return false;
                    }
                    //Date
                    Calendar calendar = Calendar.getInstance();
                    day = calendar.get(Calendar.YEAR) + args[i+1].replace(".", "");
                    i+=2;
                    break;
                default: return false;
            }
        }
        return true;
    }

    /*choose max price of session int the theatre*/
    @Override
    public void onGuildMessageReceived(@NotNull GuildMessageReceivedEvent event) {
        if (!CommandHandler.isValid(event)) return;

        String[] content = event.getMessage().getContentRaw().split(" ");

        if (!content[0].equalsIgnoreCase(Config.prefix + "films")) return;

        if(!modifications(content, event.getChannel())) {
            if(findError) return;
            EmbedBuilder msg = Messages.createErrorMsg("–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å", howToUse(), true, getName());
            event.getChannel().sendMessage(msg.build()).queue();
            return;
        }
        //System.out.println("FILMNAME: " + filmName);
        EmbedBuilder chooseFilmMsg = new EmbedBuilder();
        chooseFilmMsg.setTitle("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å");
        chooseFilmMsg.setColor(Colors.exceptionMsg);
        chooseFilmMsg.setDescription(filmChooseMsgContent);

        event.getChannel().sendMessage(chooseFilmMsg.build()).queue(message -> {
            message.addReaction("\uD83D\uDEB7").queue(); // üö∑
            message.addReaction("\uD83D\uDEAE").queue(); // üöÆ
            message.addReaction("\uD83D\uDCB0").queue(); // üí∞
            filmChooseMsgID = message.getIdLong();
        });

    }
        /*print suitable sessions*/
        @Override
        public void onGuildMessageReactionAdd(GuildMessageReactionAddEvent event) {
            if(event.getMember().getUser().equals(event.getJDA().getSelfUser())) return;

            long msgID = event.getMessageIdLong();
            if(event.getMessageIdLong() != filmChooseMsgID) return;

            // choose price
            String reactionUnicode = event.getReactionEmote().getName();
            int maxPrice = -1;
            switch (reactionUnicode) {
                case "\uD83D\uDEB7" -> maxPrice = 250;
                case "\uD83D\uDEAE" -> maxPrice = 350;
                case "\uD83D\uDCB0" -> maxPrice = Integer.MAX_VALUE;
                default -> event.getReaction().removeReaction().queue();
            }

            if(maxPrice == -1) return; // if add another reactions
            // clear choose msg
            event.getChannel().deleteMessageById(filmChooseMsgID).complete();
            // search films sessions
            FilmsParser parser = new FilmsParser(filmName, day);
            event.getChannel().sendTyping().queue();
            LinkedList<FilmRecord> films = parser.filmsList();

            // not found
            if(films == null || films.isEmpty()) {
                EmbedBuilder exceptionMsg = Messages.createExceptionMsg("–í –ø—Ä–æ–∫–∞—Ç–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                        "–í–∏–¥–∏–º–æ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. (–í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∞—Ç–∞)",
                        true, getName());
                event.getChannel().sendMessage(exceptionMsg.build()).queue();
                return;
            }

            // send films
            String info = "–ü–æ–∫–∞–∑–∞–Ω—ã "+ ((maxPrice == Integer.MAX_VALUE) ? "–≤—Å–µ —Å–µ–∞–Ω—Å—ã" : ("—Å–µ–∞–Ω—Å—ã –¥–æ " + maxPrice + "—Ä"));
            info += " –Ω–∞ " + ((day.isEmpty()) ? "—Å–µ–≥–æ–¥–Ω—è" : day);
            event.getChannel().sendMessage(info).queue();
            while (!films.isEmpty()) {
                EmbedBuilder msg = Messages.createFilmsMsg(films, maxPrice, !filmName.isEmpty());
                event.getChannel().sendMessage(msg.build()).queue();
            }

        }


    @Override
    public String getName() {
        return "films";
    }

    @Override
    public String getDescriptions() {
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∞–Ω—Å–æ–≤ –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è";
    }

    @Override
    public String howToUse() {
        return "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤: " + getFlags();
    }

    @Override
    public String getFlags() {
            return "[-f <filmname>], [-d <MM.DD>] (–¥–æ –Ω–µ–¥–µ–ª–∏)";
    }

}
